// Mocks generated by Mockito 5.0.8 from annotations
// in ditonton/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:convert' as _i28;
import 'dart:typed_data' as _i29;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ditonton/common/failure.dart' as _i10;
import 'package:ditonton/data/datasources/db/database_helper.dart' as _i17;
import 'package:ditonton/data/datasources/movie_local_data_source.dart' as _i15;
import 'package:ditonton/data/datasources/movie_remote_data_source.dart'
    as _i13;
import 'package:ditonton/data/datasources/tv_show_local_data_source.dart'
    as _i26;
import 'package:ditonton/data/datasources/tv_show_remote_data_source.dart'
    as _i24;
import 'package:ditonton/data/models/movie_detail_model.dart' as _i3;
import 'package:ditonton/data/models/movie_model.dart' as _i14;
import 'package:ditonton/data/models/movie_table.dart' as _i16;
import 'package:ditonton/data/models/tv_show_detail_model.dart' as _i4;
import 'package:ditonton/data/models/tv_show_model.dart' as _i25;
import 'package:ditonton/data/models/tv_show_seasons.dart' as _i5;
import 'package:ditonton/data/models/tv_show_table.dart' as _i19;
import 'package:ditonton/domain/entities/movie.dart' as _i11;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i12;
import 'package:ditonton/domain/entities/tv_show.dart' as _i21;
import 'package:ditonton/domain/entities/tv_show_detail.dart' as _i22;
import 'package:ditonton/domain/entities/tv_show_season.dart' as _i23;
import 'package:ditonton/domain/repositories/movie_repository.dart' as _i8;
import 'package:ditonton/domain/repositories/tv_show_repository.dart' as _i20;
import 'package:http/src/base_request.dart' as _i30;
import 'package:http/src/client.dart' as _i27;
import 'package:http/src/response.dart' as _i6;
import 'package:http/src/streamed_response.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite_common/sqlite_api.dart' as _i18;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeMovieDetailResponse extends _i1.Fake
    implements _i3.MovieDetailResponse {}

class _FakeTvShowDetailResponse extends _i1.Fake
    implements _i4.TvShowDetailResponse {}

class _FakeTvShowSeasons extends _i1.Fake implements _i5.TvShowSeasons {}

class _FakeResponse extends _i1.Fake implements _i6.Response {}

class _FakeStreamedResponse extends _i1.Fake implements _i7.StreamedResponse {}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i8.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>
      getNowPlayingMovies() => (super.noSuchMethod(
          Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i12.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i2.Either<_i10.Failure, _i12.MovieDetail>>.value(
              _FakeEither<_i10.Failure, _i12.MovieDetail>())) as _i9
          .Future<_i2.Either<_i10.Failure, _i12.MovieDetail>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>
      getMovieRecommendations(int? id) => (super.noSuchMethod(
          Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> saveWatchlist(
          _i12.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> removeWatchlist(
          _i12.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i13.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<_i14.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  Future<List<_i14.MovieModel>>.value(<_i14.MovieModel>[]))
          as _i9.Future<List<_i14.MovieModel>>);
  @override
  _i9.Future<List<_i14.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<_i14.MovieModel>>.value(<_i14.MovieModel>[]))
      as _i9.Future<List<_i14.MovieModel>>);
  @override
  _i9.Future<List<_i14.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<_i14.MovieModel>>.value(<_i14.MovieModel>[]))
      as _i9.Future<List<_i14.MovieModel>>);
  @override
  _i9.Future<_i3.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<_i3.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse()))
          as _i9.Future<_i3.MovieDetailResponse>);
  @override
  _i9.Future<List<_i14.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<_i14.MovieModel>>.value(<_i14.MovieModel>[]))
          as _i9.Future<List<_i14.MovieModel>>);
  @override
  _i9.Future<List<_i14.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<_i14.MovieModel>>.value(<_i14.MovieModel>[]))
          as _i9.Future<List<_i14.MovieModel>>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i15.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String> insertWatchlist(_i16.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<String> removeWatchlist(_i16.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i16.MovieTable?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<_i16.MovieTable?>.value())
          as _i9.Future<_i16.MovieTable?>);
  @override
  _i9.Future<List<_i16.MovieTable>> getWatchlistMovies() => (super.noSuchMethod(
          Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<List<_i16.MovieTable>>.value(<_i16.MovieTable>[]))
      as _i9.Future<List<_i16.MovieTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i17.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i18.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i18.Database?>.value())
          as _i9.Future<_i18.Database?>);
  @override
  _i9.Future<int> insertWatchlist(_i16.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> removeWatchlist(_i16.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<Map<String, dynamic>?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i9.Future<Map<String, dynamic>?>);
  @override
  _i9.Future<List<Map<String, dynamic>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i9.Future<List<Map<String, dynamic>>>);
  @override
  _i9.Future<int> insertWatchListTvShow(_i19.TvShowTable? tvShowTable) => (super
      .noSuchMethod(Invocation.method(#insertWatchListTvShow, [tvShowTable]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> removeWatchlistTvShow(_i19.TvShowTable? tvShow) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTvShow, [tvShow]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<List<Map<String, dynamic>>> getWatchlistTvShow() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTvShow, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i9.Future<List<Map<String, dynamic>>>);
  @override
  _i9.Future<Map<String, dynamic>?> getTvShowById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvShowById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i9.Future<Map<String, dynamic>?>);
}

/// A class which mocks [TvShowRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvShowRepository extends _i1.Mock implements _i20.TvShowRepository {
  MockTvShowRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>
      getNowPlayingTvShows() =>
          (super.noSuchMethod(Invocation.method(#getNowPlayingTvShows, []),
                  returnValue:
                      Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>.value(
                          _FakeEither<_i10.Failure, List<_i21.TvShow>>()))
              as _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>> getPopularTvShows() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvShows, []),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>.value(
                      _FakeEither<_i10.Failure, List<_i21.TvShow>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>
      getTopRatedTvShows() =>
          (super.noSuchMethod(Invocation.method(#getTopRatedTvShows, []),
                  returnValue:
                      Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>.value(
                          _FakeEither<_i10.Failure, List<_i21.TvShow>>()))
              as _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i22.TvShowDetail>> getTvShowDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvShowDetail, [id]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, _i22.TvShowDetail>>.value(
                      _FakeEither<_i10.Failure, _i22.TvShowDetail>()))
          as _i9.Future<_i2.Either<_i10.Failure, _i22.TvShowDetail>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>
      getTvShowsRecommendations(int? id) => (super.noSuchMethod(
              Invocation.method(#getTvShowsRecommendations, [id]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>.value(
                      _FakeEither<_i10.Failure, List<_i21.TvShow>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>> searchTvShows(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTvShows, [query]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>.value(
                      _FakeEither<_i10.Failure, List<_i21.TvShow>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> saveWatchlist(
          _i22.TvShowDetail? tvShow) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [tvShow]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> removeWatchlist(
          _i22.TvShowDetail? tvShow) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [tvShow]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>
      getWatchlistTvShows() =>
          (super.noSuchMethod(Invocation.method(#getWatchlistTvShows, []),
                  returnValue:
                      Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>.value(
                          _FakeEither<_i10.Failure, List<_i21.TvShow>>()))
              as _i9.Future<_i2.Either<_i10.Failure, List<_i21.TvShow>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i23.TvShowSeason>> getTvShowSeason(
          int? id, int? seasonNumber) =>
      (super.noSuchMethod(
              Invocation.method(#getTvShowSeason, [id, seasonNumber]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, _i23.TvShowSeason>>.value(
                      _FakeEither<_i10.Failure, _i23.TvShowSeason>()))
          as _i9.Future<_i2.Either<_i10.Failure, _i23.TvShowSeason>>);
}

/// A class which mocks [TvShowRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvShowRemoteDataSource extends _i1.Mock
    implements _i24.TvShowRemoteDataSource {
  MockTvShowRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<_i25.TvShowModel>> getNowPlayingTvShows() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTvShows, []),
              returnValue:
                  Future<List<_i25.TvShowModel>>.value(<_i25.TvShowModel>[]))
          as _i9.Future<List<_i25.TvShowModel>>);
  @override
  _i9.Future<List<_i25.TvShowModel>> getPopularTvShows() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvShows, []),
              returnValue:
                  Future<List<_i25.TvShowModel>>.value(<_i25.TvShowModel>[]))
          as _i9.Future<List<_i25.TvShowModel>>);
  @override
  _i9.Future<List<_i25.TvShowModel>> getTopRatedTvShows() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTvShows, []),
              returnValue:
                  Future<List<_i25.TvShowModel>>.value(<_i25.TvShowModel>[]))
          as _i9.Future<List<_i25.TvShowModel>>);
  @override
  _i9.Future<_i4.TvShowDetailResponse> getTvShowDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvShowDetail, [id]),
              returnValue: Future<_i4.TvShowDetailResponse>.value(
                  _FakeTvShowDetailResponse()))
          as _i9.Future<_i4.TvShowDetailResponse>);
  @override
  _i9.Future<List<_i25.TvShowModel>> getTvShowRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvShowRecommendations, [id]),
              returnValue:
                  Future<List<_i25.TvShowModel>>.value(<_i25.TvShowModel>[]))
          as _i9.Future<List<_i25.TvShowModel>>);
  @override
  _i9.Future<List<_i25.TvShowModel>> searchTvShows(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTvShows, [query]),
              returnValue:
                  Future<List<_i25.TvShowModel>>.value(<_i25.TvShowModel>[]))
          as _i9.Future<List<_i25.TvShowModel>>);
  @override
  _i9.Future<_i5.TvShowSeasons> getTvShowSeasons(int? id, int? seasonNumber) =>
      (super.noSuchMethod(
              Invocation.method(#getTvShowSeasons, [id, seasonNumber]),
              returnValue:
                  Future<_i5.TvShowSeasons>.value(_FakeTvShowSeasons()))
          as _i9.Future<_i5.TvShowSeasons>);
}

/// A class which mocks [TvShowLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvShowLocalDataSource extends _i1.Mock
    implements _i26.TvShowLocalDataSource {
  MockTvShowLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String> insertWatchlist(_i19.TvShowTable? tvShow) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [tvShow]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<String> removeWatchlist(_i19.TvShowTable? tvShow) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [tvShow]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i19.TvShowTable?> getTvShowById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvShowById, [id]),
              returnValue: Future<_i19.TvShowTable?>.value())
          as _i9.Future<_i19.TvShowTable?>);
  @override
  _i9.Future<List<_i19.TvShowTable>> getWatchlistTvShow() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTvShow, []),
              returnValue:
                  Future<List<_i19.TvShowTable>>.value(<_i19.TvShowTable>[]))
          as _i9.Future<List<_i19.TvShowTable>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i27.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse()))
          as _i9.Future<_i6.Response>);
  @override
  _i9.Future<_i6.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse()))
          as _i9.Future<_i6.Response>);
  @override
  _i9.Future<_i6.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse()))
          as _i9.Future<_i6.Response>);
  @override
  _i9.Future<_i6.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse()))
          as _i9.Future<_i6.Response>);
  @override
  _i9.Future<_i6.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse()))
          as _i9.Future<_i6.Response>);
  @override
  _i9.Future<_i6.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse()))
          as _i9.Future<_i6.Response>);
  @override
  _i9.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i29.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i29.Uint8List>.value(_i29.Uint8List(0)))
          as _i9.Future<_i29.Uint8List>);
  @override
  _i9.Future<_i7.StreamedResponse> send(_i30.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i7.StreamedResponse>.value(_FakeStreamedResponse()))
          as _i9.Future<_i7.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
